class ApiClient {
  static final ApiClient _singleton = ApiClient._internal();
  final Dio dio = Dio();

  factory ApiClient() {
    return _singleton;
  }

  ApiClient._internal() {
    dio.interceptors.add(InterceptorsWrapper(onRequest: (options, handler) {
      return handler.next(options);
    }, onResponse: (response, handler) {
      if (response.statusCode == 413) {
        throw ContentTooLargeException();
      } else if (response.statusCode == 401) {
        throw UnauthorizedException();
      } else if (response.statusCode == 504) {
        throw GatewayTimeOutException();
      } else if (response.statusCode == 422) {
        throw UnprocessableContentException(response.data["meta"]["message"]);
      } else if (response.statusCode == 500) {
        throw InternalServerErrorException();
      }
      return handler.next(response);
    }, onError: (DioException error, handler) {
      if (error.type == DioExceptionType.connectionTimeout ||
          error.type == DioExceptionType.receiveTimeout ||
          error.type == DioExceptionType.sendTimeout) {
        throw TimeoutException();
      } else if (error.type == DioExceptionType.badResponse) {
        switch (error.response?.statusCode) {
          case 400:
            throw BadRequestException(
                error.response?.data['message'] ?? 'Invalid request');
          case 401:
            throw UnauthorizedException();
          case 403:
            throw const ForbiddenException();
          case 404:
            throw const NotFoundException();
          case 413:
            throw ContentTooLargeException();
          case 500:
            throw InternalServerErrorException();
          default:
            {
              throw ServerErrorException(
                  'Server error: ${error.response?.statusCode}');
            }
        }
      } else {
        throw DioErrorException('Dio error: $error');
      }
    }));
  }
}
